def static replaceVariables(def file, def key, def value) {
    if (!file.exists()) return
    def regex = '\\$\\{' + key + '\\}'
    file.write((file.text =~ /${regex}/).replaceAll(value))
}

def isAndroid() { return project.hasProperty("android"); }

def getPropertySafe(name, defaultValue = '') {
    if (hasProperty(name) && getProperty(name).trim() != '') return getProperty(name)
    return defaultValue
}

def getPropertyExt(name, defaultValue = '') {
    if (project.ext.has(name) && project.ext[name] != null) return project.ext[name]
    return getPropertySafe(name, defaultValue)
}

def pbUpdateVariables() {
    [
            "src/main/groovy/com/qihoo360/replugin/gradle/host/AppConstant.groovy",
            "src/main/groovy/com/qihoo360/replugin/gradle/plugin/AppConstant.groovy"
    ].forEach { replaceVariables(project.file(it), "RP_VERSION", version) }
}

///// CONFIG

apply from: "${buildscript.sourceFile.parent}/rp-config.gradle"

group = getPropertyExt('RP_GROUP')

version = getPropertyExt('RP_VERSION')

def pbArtifactId = getPropertyExt('RP_ARTIFACT_ID')

pbUpdateVariables()

def pbUser = getPropertyExt('RP_USER')

def pbRepo = getPropertyExt('RP_REPO', 'maven')

def pbEmail = getPropertyExt('RP_EMAIL', pbUser)

def pbUserId = getPropertyExt('RP_USER_ID', pbUser)

def pbUserOrg = getPropertyExt('RP_USERORG', '')

def pbBintayKey = getPropertyExt('RP_BINTRAY_KEY', System.getenv('RP_BINTRAY_KEY'))

def pbDesc = getPropertyExt('RP_DESC', 'DONT BE EVIL')

def pbLicense = getPropertyExt('RP_LICENSES_NAME', 'The Apache Software License, Version 2.0')

def pbLicenseUrl = getPropertyExt('RP_LICENSES_URL', 'http://www.apache.org/licenses/LICENSE-2.0.txt')

def pbSiteUrl = getPropertyExt('RP_SITE', "https://github.com")

def pbGitUrl = getPropertyExt('RP_GIT_URL', pbSiteUrl)

def pbIssueUrl = getPropertyExt('RP_ISSUE_URL', pbSiteUrl)

println(
        ">>>「publish.gradle」 CONFIGURATIONS:"
                + "\n ${group}:${pbArtifactId}:${version}"
                + "\n ${pbDesc}"
                + "\n Android = ${project.hasProperty("android")}"
                + "\n pbUser = ${pbUser}:${pbEmail}"
                + "\n pbSite = ${pbSiteUrl}"
                + "\n pbGitUrl = ${pbGitUrl}"
                + "\n pbIssueUrl = ${pbIssueUrl}"
                + "\n License = ${pbLicense}(${pbLicenseUrl})"
                + "\n pbBintayKey = ${pbBintayKey}"
)

apply plugin: 'maven-publish'
final def theGroup = group

if (isAndroid()) { // Android libraries
    task sourceJar(type: Jar) {
        archiveClassifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }
} else { // Java libraries
    task sourceJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

artifacts {
    archives sourceJar
}

if (isAndroid()) { // Android libraries
    publishing {
        publications {
            maven(MavenPublication) {
                groupId theGroup
                artifactId pbArtifactId
                version version
                artifact "${project.buildDir}/outputs/aar/${project.name}-release.aar"
                artifact sourceJar
            }
        }
    }

} else { // Java libraries
    publishing {
        publications {
            maven(MavenPublication) {
                groupId theGroup
                artifactId pbArtifactId
                version version
                artifact jar
                artifact sourceJar
            }
        }
    }
}
